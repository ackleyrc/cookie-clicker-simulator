"""
Cookie Clicker Building Info
"""

import copy

BUILDING_BASE_VALUES = {
    'Cursor': {'unlock_order': 1, 'cost': 15.0, 'cps': 0.1},
    'Grandma': {'unlock_order': 2, 'cost': 100.0, 'cps': 1.0},
    'Farm': {'unlock_order': 3, 'cost': 1100.0, 'cps': 8.0},
    'Mine': {'unlock_order': 4, 'cost': 12000.0, 'cps': 47.0},
    'Factory': {'unlock_order': 5, 'cost': 130000.0, 'cps': 260.0},
    'Bank': {'unlock_order': 6, 'cost': 1400000.0, 'cps': 1400.0},
    'Temple': {'unlock_order': 7, 'cost': 20000000.0, 'cps': 7800.0},
    'Wizard Tower': {'unlock_order': 8, 'cost': 330000000.0, 'cps': 44000.0},
    'Shipment': {'unlock_order': 9, 'cost': 5100000000.0, 'cps': 260000.0},
    'Alchemy Lab': {'unlock_order': 10, 'cost': 75000000000.0, 'cps': 1600000.0},
    'Portal': {'unlock_order': 11, 'cost': 1000000000000.0, 'cps': 10000000.0},
    'Time Machine': {'unlock_order': 12, 'cost': 14000000000000.0, 'cps': 65000000.0},
    'Antimatter Condeser': {'unlock_order': 13, 'cost': 170000000000000.0, 'cps': 430000000.0},
    'Prism': {'unlock_order': 14, 'cost': 2100000000000000.0, 'cps': 2900000000.0}
}

class BuildInfo:
    """
    Simple class to keep track of building costs and cps
    """

    def __init__(self):
        self._building_values = copy.deepcopy(BUILDING_BASE_VALUES)

    def clone(self):
        """
        Returns a copy of the BuildInfo object
        """
        return copy.deepcopy(self)

    def build_items(self):
        """
        Returns a list of the names of potential build items to buy
        """
        return sorted(self._building_values.keys(), key = lambda build_item: self._building_values[build_item]['unlock_order'])

    def get_cost(self, item):
        """
        Returns the current cost of the given build item
        """
        return self._building_values[item]['cost']

    def get_cps(self, item):
        """
        Returns the CPS (Cookies Per Second) generated by the given build item
        """
        return self._building_values[item]['cps']

    def update_item(self, item):
        """
        Updates the cost of the given build item
        After a build item is bought, its cost increases by 15%
        """
        self._building_values[item]['cost'] *= 1.15
